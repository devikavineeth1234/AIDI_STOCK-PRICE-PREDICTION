# -*- coding: utf-8 -*-
"""AIDI_1002_Final_Project_Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yk7NkR4c2WIa4FTB_s4BT8TQtCT_7SgU

# Title: Stock Price Prediction Using Recurrent Neural Network and Long Short-Term Memory

#### Members' Names or Individual's Name: **DEVIKA RAMAKRISHNAN, MIDHULA MATHEW**
####  Emails:200573393@student.georgianc.on.ca, 200574716@student.georgianc.on.ca

GITHUB LINK - https://github.com/krishnaik06
Stock-Price-Prediction-using-Keras-and-Recurrent-Neural-Networ

RESEARCH PAPER - https://www.researchgate.net/publication/349174849_Stock_Price_Prediction_Using_Recurrent_Neural_Network_and_Long_Short-Term_Memory

# Introduction:

#### **Problem Description**:
The aim of this work is to leverage deep learning architectures to uncover and utilize underlying patterns within National Stock Exchange listed companies' data for accurate price prediction. The study explores two distinct deep learning models with the primary goal of achieving the most precise forecasts with minimal error. Specifically, the focus is on employing Recurrent Neural Networks (RNNs) to forecast future stock prices within short-term intervals.

#### **Context of the Problem**:

The problem of predicting stock prices using Recurrent Neural Networks (RNNs) and Long Short-Term Memory (LSTM) is crucial due to its direct impact on investors and financial markets. Accurate predictions empower investors to make informed decisions, optimizing gains and minimizing risks. Traditional methods often fall short in capturing the intricate dynamics present in stock market data, especially for short-term forecasts. By leveraging RNNs and LSTM, this study aims to revolutionize stock price prediction by uncovering hidden patterns and offering more precise short-term predictions, enabling better investment strategies and financial decision-making in the market.

#### **Limitation About other Approaches**:

Prior approaches like fundamental and statistical analysis, along with methods such as Genetic Algorithms and Artificial Neural Networks (ANNs), have limitations in establishing a clear correlation between Long Short-Term Memory (LSTM) dynamics and stock prices. Simple ANNs struggle with exploding gradient conditions, resulting in convergence issues due to fluctuating weights. These limitations hinder their accuracy in capturing the intricate relationship between LSTM dynamics and stock price changes.
#### **Solution**:

The method discussed, utilizing Recurrent Neural Networks (RNNs) and Long Short-Term Memory (LSTM), solves the challenge of accurate stock price prediction for National Stock Exchange listed companies. By processing historical data from 2012 to 2016, training the model, and testing it against future stock prices in 2017, this approach successfully predicts near-future stock prices with remarkable precision. This solution aids investors in making informed decisions, mitigating risks, and maximizing profits by leveraging advanced deep learning architectures to anticipate dynamic stock market changes.

# Background



| Reference |Explanation |  Dataset/Input |Weakness
| --- | --- | --- | --- |
| Stock price prediction using LSTM, RNN and CNN-sliding window model [1] | A deep learning based formalization for stockprice prediction| NSE stock price data| the  model cannot predict the prices correctly whenever there is a sudden change in the market

# Methodology

The established method utilizes RNNs and LSTM for stock price prediction, leveraging data from 2012 to 2016 and standard libraries like NumPy, Pandas, Keras, and SkLearn. Our contribution seeks to refine this approach, possibly by optimizing model architecture or employing advanced preprocessing techniques to enhance accuracy. Subsequent sections will elaborate on these enhancements with visual aids depicting modifications made to the existing method.

# Implementation

In this section, you will provide the code and its explanation. You may have to create more cells after this. (To keep the Notebook clean, do not display debugging output or thousands of print statements from hundreds of epochs. Make sure it is readable for others by reviewing it yourself carefully.)
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# Importing the training set
dataset_train = pd.read_csv("Google_Stock_Price_Train.csv")
training_set = dataset_train.iloc[:, 1:2].values

dataset_train.head()

dataset_train.tail()

dataset_train.shape

dataset_train.info()

dataset_train.columns.values

dataset_train.dtypes

dataset_train.describe()

sns.set()
plt.figure(figsize=(8,6))
sns.distplot(dataset_train['High'],color="green")
plt.title("High")
plt.show()

sns.set()
plt.figure(figsize=(8,6))
sns.distplot(dataset_train['Low'],color="red")
plt.title("Low")
plt.show()

plt.savefig('data_box')
plt.show()
import pylab as plot
dataset_train.hist(bins=20,figsize=(25,25))
plt.suptitle('Histogram for each numeric input variable')
plt.savefig('data_hist')
plt.show()

plt.figure(figsize=(5,5))
correlation=dataset_train.corr()
sns.heatmap(correlation, annot=True)
plt.show()

# Feature Scaling
from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler(feature_range=(0, 1))
training_set_scaled = sc.fit_transform(training_set)

# Creating a data structure with 60 timesteps and 1 output
X_train = []
y_train = []
for i in range(60, 1258):
    X_train.append(training_set_scaled[i - 60 : i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

# Reshaping
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Part 2 - Building the RNN

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN
regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units=50, return_sequences=True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units=50))
regressor.add(Dropout(0.2))

regressor.add(Dense(units=64, activation='relu'))

# Adding the output layer
regressor.add(Dense(units=1))

# Compiling the RNN
regressor.compile(optimizer="adam", loss="mean_squared_error")

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs=50, batch_size=32)

# Part 3 - Making the predictions and visualising the results

# Getting the real stock price of 2017
dataset_test = pd.read_csv("Google_Stock_Price_Test.csv")
real_stock_price = dataset_test.iloc[:, 1:2].values

dataset_test.head()

dataset_test.tail()

dataset_test.info()

dataset_test.columns.values

dataset_test.dtypes

dataset_test.describe()

sns.set()
plt.figure(figsize=(8,6))
sns.distplot(dataset_test['High'],color="green")
plt.title("High")
plt.show()

sns.set()
plt.figure(figsize=(8,6))
sns.distplot(dataset_train['Low'],color="red")
plt.title("Low")
plt.show()

plt.figure(figsize=(5,5))
correlation=dataset_test.corr()
sns.heatmap(correlation, annot=True)
plt.show()

# Getting the predicted stock price of 2017
dataset_total = pd.concat((dataset_train["Open"], dataset_test["Open"]), axis=0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60 :].values
inputs = inputs.reshape(-1, 1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 80):
    X_test.append(inputs[i - 60 : i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Visualising the results
plt.plot(real_stock_price, color="red", label="Real Google Stock Price")
plt.plot(predicted_stock_price, color="blue", label="Predicted Google Stock Price")
plt.title("Google Stock Price Prediction")
plt.xlabel("Time")
plt.ylabel("Google Stock Price")
plt.legend()
plt.show()

"""# Our Contribution

Our contribution involves expanding the model by incorporating additional LSTM layers or adjusting the existing ones. This enhancement may encompass fine-tuning the number of units or neurons within each layer, or modifying their configurations to improve the model's predictive capabilities.

Our contribution also encompasses an extensive incorporation of exploratory data analysis (EDA) and visualizations. This addition involves comprehensive data exploration techniques and a multitude of visual representations, aiding in a deeper understanding of the underlying patterns within the dataset.

# Conclusion and Future Direction


Through this project, I've learned the efficacy of RNNs and LSTM in predicting stock prices using historical data. The model demonstrated competence in foreseeing near-future stock values, particularly for Google's stock from Jan 2017.

However, the model's limitations were evident in responding to sudden market changes, indicating the need for ongoing enhancements. Future improvements might involve diversifying datasets, incorporating sentiment analysis, or exploring ensemble methods to bolster the model's adaptability to market dynamics.

This project highlights the tool's potential for investors but emphasizes the necessity for prudent decision-making, given the financial market's unpredictable nature. Ultimately, while predictive models aid in decision-making, they're not infallible in volatile markets.

# References:

[1]:  Vivek Rajput, Sarika Bobde STOCK MARKET FORECASTING TECHNIQUES: LITERATURE SURVEY. Department of Computer Engineering, Maharashtra Institute of Technology, Pune, India IJCSMC, Vol.5, Issue. 6, June 2016, pg.500 506.


[2]:  Ashutosh Nayak Predicting Stock with LSTM
https://towardsdatascience.com/predicting-stock-price-with-lstm13af86a74944

[3]:  elekshmy Selvin, Vinayakumar R, Gopalakrishnan E.A, Vijay Krishna Menon, Soman K.P STOCK PRICE PREDICTION USING
LSTM,RNNAND CNN-SLIDING WINDOW MODEL Centre for Computational Engineering and Networking (CEN),Amrita School of Engineering,Coimbatore. DOI: 10.1109/ICACCI.2017.8126078 Conference: 2017 International Conference on Advances in Computing communications and Informatics (ICACCI)
"""